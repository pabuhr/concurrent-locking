#!/bin/sh -

#zip Barrier.zip softsolutions/Barrier* softsolutions/Harness.c softsolutions/run1 softsolutions/runallBarrier 

# Experiments for: Barrier

# ARM -mno-outline-atomics => use LL/SC instead of calls to atomic routines: __aarch64_swp_acq_rel, __aarch64_cas8_acq_rel
# ARM -march=armv8.2-a+lse => generate Arm LSE extension instructions SWAP and CAS
# https://community.arm.com/developer/tools-software/tools/b/tools-software-ides-blog/posts/making-the-most-of-the-arm-architecture-in-gcc-10

algorithms="BarrierButterfly BarrierPopStack BarrierDissem BarrierDissemMCS BarrierFai BarrierPthread BarrierRing BarrierRingAravind BarrierSenseRev \
	 BarrierSTD BarrierSym BarrierTicket BarrierTour BarrierTourMCS BarrierTreeA BarrierTreeB BarrierTreeC BarrierTreeCombMCS BarrierTreeD BarrierTreeMCS"
time=25
runs=13
outdir=`hostname`
exec=`hostname`.out
atomicinst=

mkdir -p ${outdir}

if [ ${#} -ne 0 ] ; then
    algorithms="${@}"
fi

cflag="-Wall -Wextra -Werror -Wno-implicit-fallthrough -O3 -DNDEBUG -fno-reorder-functions -DPIN" #
if [ ${outdir} = "algol" -o ${outdir} = "prolog" ] ; then
#    atomicinst=-mno-outline-atomics	# use ARM LL/SC instructions for atomics
    atomicinst=-march=armv8.2-a+lse	# use ARM LSE instructions for atomics
    cflag=${cflag}" ${atomicinst} -DATOMIC"
fi

if [ "${outdir}" = "prolog" -o "${outdir}" = "swift" -o "${outdir}" = "java" ] ; then # Ubuntu 22.04
    CC=gcc-12
else
    CC=gcc-11
fi

runalgorithm() {
    for atomic in "" ; do # "ATOMIC"
	for affinity in "" ; do # "NOAFFINITY"
	    outfile=${outdir}${affinity}/${1}${atomic}
	    echo "${outfile}"
	    if [ ${1} = "BarrierSTD" ] ; then	# C++ barrier ?
		`echo ${CC} | tr cc ++` ${cflag} -Wno-volatile -std=c++20 ${affinity:+-D${affinity}} ${atomic:+-D${atomic}} ${atomicinst:+-DATOMICINST=${atomicinst}} -D${outdir} -DAlgorithm=${1} -DNCS_DELAY=20 Harness.c -lpthread -lm -o ${exec}
	    else
		${CC} ${cflag} -std=gnu11 ${affinity:+-D${affinity}} ${atomic:+-D${atomic}} ${atomicinst:+-DATOMICINST=${atomicinst}} -D${outdir} -DAlgorithm=${1} -DNCS_DELAY=20 Harness.c -lpthread -lm -o ${exec}
	    fi
	    ./run1 time="${time}" exec="${exec}" T=1 N=1 > "${outfile}"
	    ./run1 time="${time}" exec="${exec}" T=2 N=32 inc=2 >> "${outfile}"
	    ./run1 time="${time}" exec="${exec}" T=36 N=128 inc=4 >> "${outfile}"
	    if [ -f core ] ; then
		echo core generated for ${1}
		break
	    fi
	done
    done
}

rm -rf core
for algorithm in ${algorithms} ; do
    runalgorithm ${algorithm}
done

rm -f "${exec}"
