#!/bin/sh -

# Experiments for: FCFS

# ARM -mno-outline-atomics => use LL/SC instead of calls to atomic routines: __aarch64_swp_acq_rel, __aarch64_cas8_acq_rel
# ARM -march=armv8.2-a+lse => generate Arm LSE extension instructions SWAP and CAS
# https://community.arm.com/developer/tools-software/tools/b/tools-software-ides-blog/posts/making-the-most-of-the-arm-architecture-in-gcc-10

algorithms="Burns2 BurnsLynch LamportFast TaubenfeldBuhr SpinLock Hehner MCS"
time=20
runs=15
outdir=`hostname`
exec=`hostname`.out
atomicinst=

mkdir -p ${outdir}

if [ ${#} -ne 0 ] ; then
    algorithms="${@}"
fi

cflag="-Wall -Wextra -Werror -Wno-implicit-fallthrough -std=gnu11 -O3 -DSTATS -DNDEBUG -fno-reorder-functions -DPIN" #
if [ ${outdir} = "algol" -o ${outdir} = "prolog" ] ; then
#    atomicinst=-mno-outline-atomics	# use ARM LL/SC instructions for atomics
    atomicinst=-march=armv8.2-a+lse
    cflag=${cflag}" ${atomicinst} -DATOMIC"
fi

if [ "${outdir}" = "prolog" -o "${outdir}" = "swift" ] ; then # Ubuntu 22.04
    CC=gcc-12
else
    CC=gcc-11
fi

runalgorithm() {
#    for atomic in "" "ATOMIC" ; do
    for atomic in "" ; do
	outfile=${outdir}/${1}${2:+${2}}${atomic}
	stats="2> \${outfile}_stats"
	echo "${outfile}"
	${CC} ${cflag} ${atomic:+-D${atomic}} ${atomicinst:+-DATOMICINST=${atomicinst}} -D${outdir} -DAlgorithm=${1} ${2:+-D${2}} -DNCS_DELAY=20 Harness.c -lpthread -lm -o ${outdir}.out
	./run1 time="${time}" runs="${runs}" exec="${exec}" 1> "${outfile}" 2> ${outfile}_stats
	if [ -f core ] ; then
	    echo core generated for ${1}
	    break
	fi
    done
}

rm -rf core
for algorithm in ${algorithms} ; do
    runalgorithm ${algorithm}
    if [ ${algorithm} != "Hehner" -a ${algorithm} != "MCS" ] ; then
	runalgorithm ${algorithm} FCFS_WH24
    fi
done

rm -f "${exec}"
