#!/bin/sh -

# Experiments for: High-Performance N-Thread Software Solutions for Mutual Exclusion, Peter A. Buhr,
# David Dice and Wim H. Hesselink, Concurrency and Computation: Practice and Experience,
# http://dx.doi.org/10.1002/cpe.3263

algorithms="Communicate AravindF3 AravindF4 Burns2 DeBruijn Dijkstra Eisenberg Hehner Hesselink Kessels Knuth LamportRetract LamportBakery LamportFast LycklamaBuhr Lynch Peterson PetersonT PetersonBuhr Szymanski Taubenfeld TaubenfeldBuhr Arbiter MCS SpinLock PthreadLock ZhangYA Zhang2T ZhangdT"
time=60
outdir=`hostname`
exec=`hostname`.out

mkdir -p ${outdir}

if [ ${#} -ne 0 ] ; then
    algorithms="${@}"
fi

cflag="-Wall -Wextra -Werror -Wno-implicit-fallthrough -std=gnu11 -O3 -DNDEBUG -fno-reorder-functions -DPIN" #
if [ ${outdir} = "algol" -o ${outdir} = "prolog" ] ; then
#    atomicinst=-mno-outline-atomics	# use ARM LL/SC instructions for atomics
    atomicinst=-march=armv8.2-a+lse
    cflag=${cflag}" ${atomicinst} -DATOMIC"
fi

if [ "${outdir}" = "prolog" -o "${outdir}" = "swift" -o "${outdir}" = "java" ] ; then # Ubuntu 22.04
    CC=gcc-12
else
    CC=gcc-11
fi

runalgorithm() {
    for fast in "" "FAST" ; do
	outfile="${outdir}/${1}${2}${fast}"
	echo "${outfile}"
	${CC} ${cflag} ${fast:+-D${fast}} -DAlgorithm=${1} Harness.c -lpthread -lm -o ${exec}
	./run1 time=${time} exec="${exec}" degree="${2}" > "${outfile}"
	if [ -f core ] ; then
	    echo core generated for ${1}
	    rm -rf core
	    break
	fi
    done
}

for algorithm in ${algorithms} ; do
    if [ ${algorithm} = "ZhangdT" -o ${algorithm} = "ZhangdTWHH" ] ; then
	d=2
	while [ ${d} -le 32 ] ; do
	    runalgorithm ${algorithm} ${d}
	    d=`expr ${d} + ${d}`
	done
    else
	runalgorithm ${algorithm}
    fi
done

rm -f "${exec}"
